{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.style.ts","components/QuestionCard.tsx","images/school.jpg","App.style.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totoalQuestions","className","dangerouslySetInnerHTML","__html","oneAnswer","correctAnswer","answer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.059d2fa9.chunk.js","sourcesContent":["import {shuffleArray} from './utils'\r\n\r\nexport type Question={\r\n    catagory:string;\r\n    correct_answer:string;\r\n    difficulty:string;\r\n    incorrect_answers:string[];\r\n    question:string;\r\n    type:string;\r\n};\r\n\r\nexport type QuestionState=Question & {answers: string[]};\r\n\r\nexport enum Difficulty{\r\n    EASY=\"easy\",\r\n    MEDIUM=\"medium\",\r\n    HARD=\"hard\"\r\n};\r\n\r\nexport const fetchQuizQuestions= async(amount:number,difficulty:Difficulty)=>{\r\n    const endpoint=`https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    // 等待回應後，再轉為json格式\r\n    const data= await(await fetch(endpoint)).json();\r\n    return data.results.map((question:Question)=>(\r\n        {\r\n            ...question, \r\n            answers:shuffleArray([...question.incorrect_answers,question.correct_answer])\r\n        }\r\n    ))  \r\n};","export const shuffleArray = (array:any[])=>\r\n    [...array].sort(()=>Math.random()-0.5);","import styled from \"styled-components\";\r\n\r\nexport const Wrapper=styled.div`\r\n    max-width: 11000px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n    text-align: center;\r\n\r\n    p{\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\ntype ButtonWrapperProps={\r\n    correct:boolean;\r\n    userClicked:boolean;\r\n}\r\n\r\nexport const ButtonWrapper= styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover{\r\n        opacity: 0,8;\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({correct,userClicked})=>\r\n            correct            \r\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n            : !correct && userClicked\r\n            ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)'\r\n        };\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\r\n    }\r\n`;","import React from 'react';\r\n//Types\r\nimport {AnswerObject} from '../App';\r\n//Styles\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.style';\r\n\r\ntype Props={\r\n    question:string;\r\n    answers:string[];\r\n    //callback監聽滑鼠事件\r\n    callback:(e:React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer:AnswerObject|undefined;\r\n    questionNr:number;\r\n    totoalQuestions:number;\r\n}\r\n\r\nconst QuestionCard=({question,answers,callback,userAnswer,questionNr,totoalQuestions}:Props)=>(\r\n    <Wrapper>\r\n        <p className=\"number\">\r\n            Question: {questionNr} / {totoalQuestions}\r\n        </p>\r\n        <p dangerouslySetInnerHTML={{__html:question}}/>\r\n        <div>\r\n            {answers.map((oneAnswer)=>(\r\n                <ButtonWrapper key={oneAnswer} \r\n                    correct={userAnswer?.correctAnswer===oneAnswer }\r\n                    userClicked={userAnswer?.answer===oneAnswer}\r\n                >\r\n                    <button disabled={!!userAnswer} value={oneAnswer} onClick={callback}>\r\n                        <span dangerouslySetInnerHTML={{__html:oneAnswer}}></span>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n    </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/school.b2a959c0.jpg\";","import styled,{createGlobalStyle} from \"styled-components\";\r\nimport BGImage from './images/school.jpg';\r\n\r\nexport const GlobalStyle= createGlobalStyle`\r\n    html{\r\n        height: 100%;\r\n    }\r\n\r\n    body{\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper=styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    >p{\r\n        color:#fff;\r\n    }\r\n\r\n    .score{\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1{\r\n        font-family: Fascinate Inline;\r\n        background-image: linear-gradient(18deg,#fff,#87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter:drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n    }\r\n\r\n    .start, .next{\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n    \r\n    .start{\r\n        max-width: 200px;\r\n    }\r\n`;","import React,{useState} from 'react';\nimport { fetchQuizQuestions } from './API';\n//components\nimport QuestionCard from './components/QuestionCard';\n//Types\nimport { QuestionState,Difficulty } from './API';\n//Styles\nimport { GlobalStyle, Wrapper } from './App.style';\n\nexport type AnswerObject={\n  question:string;\n  answer:string;\n  correct:boolean;\n  correctAnswer:string;\n}\n\nconst TOTAL_QUESTIONS=10;\n\nconst App=()=> {\n  const [loading,setLoading]=useState(false);\n  const [questions,setQuestions]=useState<QuestionState[]>([]);\n  const [number,setNumber]=useState(0);\n  const [userAnswers,setUserAnswers]=useState<AnswerObject[]>([]);\n  const [score,setScore]=useState(0);\n  const [gameOver,setGameOver]=useState(true);\n  \n  //題目、載入完成初始設置\n  const startTrivia=async()=>{\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer=(e:React.MouseEvent<HTMLButtonElement>)=>{\n    if(!gameOver){\n      //user answer\n      const answer=e.currentTarget.value;\n      //check answer agianst correct answer\n      const correct=questions[number].correct_answer ===answer;\n      //Add score if answer is correct\n      if(correct) setScore(prev=>prev+1);\n      //Save answer in the array for user answers\n      const answerObject={\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev)=>[...prev,answerObject]);\n    }\n  };\n  \n  const nextQuestion =()=>{\n    //Move on to the next question if not the last question\n    const nextQuestion=number+1;\n\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    }else{\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n    <GlobalStyle/>\n    <Wrapper>\n      <h1>My Quiz</h1>\n      { gameOver||userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}> Start </button>\n        ):null }\n      \n      { !gameOver? <p className=\"score\">Score: {score}</p> :null}\n      { loading && <p>Loading Questions...</p>}\n      { !loading && !gameOver &&(\n        <QuestionCard\n        questionNr={number+1}\n        totoalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      /> )}\n      {/* 下一題判定 1.沒輸掉 2.載入完成 3.題目數量內 */}\n      {!gameOver && !loading && userAnswers.length ===number+1 && number !==TOTAL_QUESTIONS-1?(\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n      ):null}\n\n      \n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}